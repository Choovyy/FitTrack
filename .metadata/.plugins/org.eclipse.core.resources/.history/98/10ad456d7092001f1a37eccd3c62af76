package com.donaire.FitTrack.Controller;

import com.donaire.FitTrack.Entity.WorkoutGoal;
import com.donaire.FitTrack.Service.WorkoutGoalService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/workout-goals")
public class WorkoutGoalController {

    @Autowired
    private WorkoutGoalService workoutGoalService;

    // Create a new Workout Goal
    @PostMapping
    public WorkoutGoal createWorkoutGoal(@RequestBody WorkoutGoal workoutGoal) {
        return workoutGoalService.saveWorkoutGoal(workoutGoal);
    }

    // Get all Workout Goals
    @GetMapping
    public List<WorkoutGoal> getAllWorkoutGoals() {
        return workoutGoalService.getAllWorkoutGoals();
    }

    // Get a Workout Goal by ID
    @GetMapping("/{id}")
    public ResponseEntity<WorkoutGoal> getWorkoutGoalById(@PathVariable Long id) {
        return workoutGoalService.getWorkoutGoalById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // Update an existing Workout Goal
    @PutMapping("/{id}")
    public ResponseEntity<WorkoutGoal> updateWorkoutGoal(@PathVariable Long id, @RequestBody WorkoutGoal workoutGoal) {
        return workoutGoalService.getWorkoutGoalById(id)
                .map(existingGoal -> {
                    existingGoal.setGoalDescription(workoutGoal.getGoalDescription());
                    existingGoal.setTargetMetrics(workoutGoal.getTargetMetrics());
                    existingGoal.setDeadline(workoutGoal.getDeadline());
                    WorkoutGoal updatedGoal = workoutGoalService.saveWorkoutGoal(existingGoal);
                    return ResponseEntity.ok(updatedGoal);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    // Delete a Workout Goal
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteWorkoutGoal(@PathVariable Long id) {
        if (workoutGoalService.getWorkoutGoalById(id).isPresent()) {
            workoutGoalService.deleteWorkoutGoal(id);
            return ResponseEntity.ok("Workout Goal with ID " + id + " has been successfully deleted.");
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
